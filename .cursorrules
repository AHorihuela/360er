## Project Context
A web-based 360-degree feedback platform that allows managers to register, set up review cycles for their direct reports, and distribute a unique anonymous feedback link to multiple reviewers (peers, direct reports, and senior coleagues). Reviewers submit their feedback anonymously through a centralized form, and the system aggregates all responses into a consolidated report for the manager to review.
- The manager can create an account and maintain a list of employees to be reviewed.
- For each review cycle, a unique, shareable link is generated, which the manager can send to all intended reviewers.
- The reviewers' submissions, including their relationship to the reviewee, are stored securely and anonymously in a centralized database.
- Upon completion of the feedback collection process, the system synthesizes the input into a unified 360-degree review report, providing the manager with a comprehensive summary of performance insights.

## Database Documentation
The complete database structure, relationships, and policies are documented in `database.md`. This document serves as the single source of truth for our database architecture and should be:
- Updated whenever new database information is discovered
- Referenced before making database changes
- Used to verify policy and security requirements
- Kept in sync with actual database state
- Updated when new tables, functions, or policies are added

## Code Style 
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- All code you write MUST be fully optimized. "Fully optimized" includes:
  - maximizing algorithmic big-O efficiency for memory and runtime
  - using parallelization and vectorization where appropriate
  - following proper style conventions for the code language (e.g. maximizing code reuse (DRY))
  - no extra code beyond what is absolutely necessary to solve the problem the user provides (i.e. no technical debt)

## Structure
- Structure repository files as follows:

```
server/
├── src/
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── types/          # TypeScript types
    └── lib/            # Shared libraries
extension/
├── src/
    ├── background/     # Service worker scripts
    ├── content/        # Content scripts
    ├── popup/          # Extension popup UI
    ├── options/        # Extension options page
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── lib/            # Shared libraries
    ├── types/          # TypeScript types
    └── storage/        # Chrome storage utilities
shared/
├── src/
    ├── types/          # TypeScript types, only used for shared types between server and extension
    └── utils/          # Helper functions, only used for shared functions between server and extension
```

## Tech Stack
- React
- TypeScript
- Tailwind CSS
- Shadcn UI
- Express.js
- Supabase

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- When fixing TypeScript errors, carefully verify that existing functionality is preserved - never remove or modify code that's actually being used

## State Management
- Use React Context for global state when needed
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## SQL Code Style
- When providing SQL commands, do not include line numbers or prefixes
- Each SQL statement should end with a semicolon
- Use uppercase for SQL keywords
- Use double quotes for table and column names
- Break complex queries into multiple lines for readability
- Add comments to explain complex operations

## Supabase and Database Rules
- When creating RLS policies for anonymous access:
  1. Always check unique_link IS NOT NULL for feedback request access
  2. Grant both table permissions (GRANT) AND create RLS policies
  3. Check all dependent tables in policies (e.g., review_cycles for dates)
  4. Test both positive and negative cases after policy changes
  5. Keep existing working policies until new ones are verified
- Don't enable RLS without corresponding policies (causes lockout)
- When querying related tables, ensure anonymous access is granted if needed
- Avoid overlapping policies for the same operation

## Data Flow and Type Safety
- Never rename properties that come directly from database queries without updating all dependent code
- When modifying data structures, verify the complete data flow from database to UI
- Keep property names consistent between database fields and TypeScript types
- Before changing any property used in calculations (like progress bars), verify all places where it's used
- When working with arrays (like feedback_responses), always check both the array and its length accessor
- Document any property renames in comments to make the data flow clear

## Debugging Protocol
When encountering issues, request the following if not already provided:
1. Full error message and stack trace from console
2. Network tab details for failed requests
3. Current state of relevant database tables
4. Screenshots of the UI state when error occurs
5. Steps to reproduce the error

For data flow issues:
1. Check the Supabase query structure
2. Verify property names match between database and code
3. Check TypeScript types match the actual data shape
4. Look for any property renames in data processing
5. Verify calculations use the correct property names
6. Test with both empty and populated data states

For Supabase specific issues:
1. RLS policy effectiveness with `auth.uid()` checks
2. Table permissions via `GRANT` listings
3. Policy definitions with `\d tablename`
4. Actual data access patterns with query logs
5. Run `SELECT * FROM pg_policies WHERE schemaname = 'public';` to review all policies

## Version Control
- Update version number in `src/lib/version.ts` with every deployment
- Version format: v{major}.{minor}.{patch} (e.g., v0.1.0)
  - Major: Breaking changes
  - Minor: New features
  - Patch: Bug fixes and small improvements

## Hosting and Deployment
- Project is hosted on Vercel (https://vercel.com/ahorihuelas-projects/squad360)
- Production domain: squad360.vercel.app
- Database hosted on Supabase (https://vwckinhujlyviulpmtjo.supabase.co)

### Deployment Process
1. Ensure all changes are committed to git
2. Run build locally to verify no TypeScript errors: `npm run build`
3. Deploy to production: `vercel --prod`
4. Verify deployment at Vercel dashboard
5. Check deployment logs at: https://vercel.com/ahorihuelas-projects/squad360/_logs

### Environment Variables
Required in Vercel dashboard:
- VITE_SUPABASE_URL: https://vwckinhujlyviulpmtjo.supabase.co
- VITE_SUPABASE_ANON_KEY: [stored in Vercel]
- VITE_API_URL: [production API URL]
- VITE_OPENAI_API_KEY: [stored in Vercel]
- PORT: 3000

### Build Configuration
- Framework preset: Vite
- Build command: `npm run build`
- Output directory: `dist`
- Install command: `npm install`
- Development command: `npm run dev`

### Deployment Checklist
Before deploying:
1. Check all TypeScript errors are fixed
2. Verify build succeeds locally
3. Test all features in development
4. Commit all changes
5. Push to git repository

## IMPORTANT REMINDERS:
## - NEVER remove functionality when fixing TypeScript errors
## - Instead, fix type definitions, add proper type annotations, or handle null checks
## - If unsure about a function's purpose, keep it and add proper typing
## - Always test functionality after fixing TypeScript errors
## - Document any type changes that might affect other parts of the codebase