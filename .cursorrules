# 360 AI Review

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
A web-based 360-degree feedback platform that allows managers to register, set up review cycles for their direct reports, and distribute a unique anonymous feedback link to multiple reviewers (peers, direct reports, and senior coleagues). Reviewers submit their feedback anonymously through a centralized form, and the system aggregates all responses into a consolidated report for the manager to review.
- The manager can create an account and maintain a list of employees to be reviewed.
- For each review cycle, a unique, shareable link is generated, which the manager can send to all intended reviewers.
- The reviewers’ submissions, including their relationship to the reviewee, are stored securely and anonymously in a centralized database.
- Upon completion of the feedback collection process, the system synthesizes the input into a unified 360-degree review report, providing the manager with a comprehensive summary of performance insights.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure repository files as follows:

```
server/
├── src/
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── types/          # TypeScript types
    └── lib/            # Shared libraries
extension/
├── src/
    ├── background/     # Service worker scripts
    ├── content/        # Content scripts
    ├── popup/          # Extension popup UI
    ├── options/        # Extension options page
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── lib/            # Shared libraries
    ├── types/          # TypeScript types
    └── storage/        # Chrome storage utilities
shared/
├── src/
    ├── types/          # TypeScript types, only used for shared types between server and extension
    └── utils/          # Helper functions, only used for shared functions between server and extension
```

## Tech Stack
- React
- TypeScript
- Tailwind CSS
- Shadcn UI
- Express.js
- Supabase

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions
- When fixing TypeScript errors, carefully verify that existing functionality is preserved - never remove or modify code that's actually being used

## State Management
- Use React Context for global state when needed
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog 

## SQL Code Style
- When providing SQL commands, do not include line numbers or prefixes
- Each SQL statement should end with a semicolon
- Use uppercase for SQL keywords
- Use double quotes for table and column names
- Break complex queries into multiple lines for readability
- Add comments to explain complex operations

## Supabase RLS Rules
- When creating RLS policies for anonymous access:
  1. Always check unique_link IS NOT NULL for feedback request access
  2. Grant both table permissions (GRANT) AND create RLS policies
  3. Check all dependent tables in policies (e.g., review_cycles for dates)
  4. Test both positive and negative cases after policy changes
  5. Keep existing working policies until new ones are verified

## Common Mistakes to Avoid
- Don't remove unique_link check from feedback request policies
- Don't forget to GRANT SELECT on tables referenced in policy checks
- Don't enable RLS without corresponding policies (causes lockout)
- Don't modify policies without checking dependent tables
- When querying related tables (e.g., employees, review_cycles), ensure anonymous access is granted if needed
- Avoid overlapping policies for the same operation - each operation should have one clear policy
- Always review ALL existing policies before making changes to avoid unintended side effects
- Don't forget to update version number in footer with deployments

## Debugging Protocol
When encountering issues, request the following if not already provided:
1. Full error message and stack trace from console
2. Network tab details for failed requests (status, headers, response)
3. Current state of relevant database tables
4. Screenshots of the UI state when error occurs
5. Steps to reproduce the error
6. Full list of existing RLS policies for ALL affected tables before making changes

For Supabase specific issues, also check:
1. RLS policy effectiveness with `auth.uid()` checks
2. Table permissions via `GRANT` listings
3. Policy definitions with `\d tablename`
4. Actual data access patterns with query logs
5. Run `SELECT * FROM pg_policies WHERE schemaname = 'public';` to review all policies

## Version Control
- Update version number in `src/lib/version.ts` with every deployment
- Version format: v{major}.{minor}.{patch} (e.g., v0.1.0)
- Major: Breaking changes
- Minor: New features
- Patch: Bug fixes and small improvements
- Version number must be visible in the footer of every page

## Hosting and Deployment
- Project is hosted on Vercel (https://vercel.com/ahorihuelas-projects/squad360)
- Production domain: squad360-no2ery2py-ahorihuelas-projects.vercel.app
- Database hosted on Supabase (https://vwckinhujlyviulpmtjo.supabase.co)

### Deployment Process
1. Ensure all changes are committed to git
2. Run build locally to verify no TypeScript errors: `npm run build`
3. Deploy to production: `vercel --prod`
4. Verify deployment at Vercel dashboard
5. Check deployment logs at: https://vercel.com/ahorihuelas-projects/squad360/_logs

### Environment Variables
Required in Vercel dashboard:
- VITE_SUPABASE_URL: https://vwckinhujlyviulpmtjo.supabase.co
- VITE_SUPABASE_ANON_KEY: [stored in Vercel]
- VITE_API_URL: [production API URL]
- VITE_OPENAI_API_KEY: [stored in Vercel]
- PORT: 3000

### Build Configuration
- Framework preset: Vite
- Build command: `npm run build`
- Output directory: `dist`
- Install command: `npm install`
- Development command: `npm run dev`

### Vercel Configuration
```json
{
  "buildCommand": "npm run build",
  "devCommand": "npm run dev",
  "installCommand": "npm install",
  "framework": "vite",
  "outputDirectory": "dist",
  "public": true,
  "routes": [
    {
      "src": "/assets/(.*)",
      "dest": "/assets/$1",
      "headers": {
        "Cache-Control": "public, max-age=31536000, immutable"
      }
    },
    { 
      "src": "/feedback/(.*)", 
      "dest": "/index.html",
      "headers": {
        "X-Frame-Options": "DENY",
        "X-Content-Type-Options": "nosniff",
        "X-XSS-Protection": "1; mode=block",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "*"
      },
      "continue": true
    },
    {
      "handle": "filesystem"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "github": {
    "silent": true
  }
}
```

### Deployment Checklist
Before deploying:
1. Check all TypeScript errors are fixed
2. Verify build succeeds locally
3. Test all features in development
4. Commit all changes
5. Update version number if needed
6. Push to git repository

After deploying:
1. Verify deployment succeeded
2. Check production logs for errors
3. Test critical paths:
   - Authentication flow
   - Review creation
   - Feedback submission
   - Anonymous feedback links
4. Monitor Supabase logs for database issues
5. Check environment variables are properly set

### Rollback Process
If deployment fails:
1. View deployment on Vercel dashboard
2. Click "View Build Logs" to identify issue
3. If needed, rollback to previous deployment:
   ```bash
   vercel rollback
   ```
4. Verify rollback succeeded
5. Fix issues locally before attempting new deployment

### Monitoring
- Vercel Analytics Dashboard
- Supabase Database Health
- Error Tracking via Console Logs
- Performance Metrics in Vercel Dashboard